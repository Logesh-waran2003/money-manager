// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(cuid())
  name              String
  email             String            @unique
  emailVerified     DateTime?
  password          String
  image             String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  accounts          Account[]
  transactions      Transaction[]
  categories        Category[]
  recurringPayments RecurringPayment[]
  credits           Credit[]
}

model Account {
  id            String        @id @default(cuid())
  userId        String
  name          String
  type          String        // bank, credit, cash, investment
  balance       Float
  currency      String        @default("USD")
  isDefault     Boolean       @default(false)
  accountNumber String?
  institution   String?
  notes         String?
  creditLimit   Float?        // Only for credit accounts
  dueDate       DateTime?     // Only for credit accounts
  isActive      Boolean       @default(true)  // New field to track account status
  
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions  Transaction[] @relation("FromAccount")
  transfers     Transaction[] @relation("ToAccount")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  @@index([userId])
}

model Category {
  id            String        @id @default(cuid())
  userId        String
  name          String
  color         String        @default("#000000")
  icon          String?
  isIncome      Boolean       @default(false)
  isDefault     Boolean       @default(false)
  
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions  Transaction[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  @@index([userId])
  @@unique([userId, name])
}

model Transaction {
  id                String           @id @default(cuid())
  userId            String
  accountId         String
  categoryId        String?
  description       String?
  amount            Float
  date              DateTime
  type              String           // income, expense, transfer, credit
  creditType        String?          // borrowed, payment (only for credit transactions)
  toAccountId       String?
  counterparty      String?
  appUsed           String?
  notes             String?
  
  // For recurring transactions
  recurring         Boolean          @default(false)
  recurringFrequency String?         // daily, weekly, monthly, yearly
  recurringEndDate  DateTime?
  recurringPaymentId String?
  
  // For credit transactions
  creditId          String?
  
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  account           Account          @relation("FromAccount", fields: [accountId], references: [id], onDelete: Cascade)
  category          Category?        @relation(fields: [categoryId], references: [id])
  toAccount         Account?         @relation("ToAccount", fields: [toAccountId], references: [id])
  recurringPayment  RecurringPayment? @relation(fields: [recurringPaymentId], references: [id])
  credit            Credit?          @relation(fields: [creditId], references: [id])
  
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  @@index([userId])
  @@index([accountId])
  @@index([categoryId])
  @@index([date])
}

model RecurringPayment {
  id            String        @id @default(cuid())
  userId        String
  name          String
  amount        Float
  frequency     String        // daily, weekly, monthly, quarterly, yearly
  startDate     DateTime
  endDate       DateTime?
  nextDueDate   DateTime
  accountId     String?
  categoryId    String?
  description   String?
  isActive      Boolean       @default(true)
  
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions  Transaction[]
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  @@index([userId])
  @@index([nextDueDate])
}

model Credit {
  id            String        @id @default(cuid())
  userId        String
  name          String
  amount        Float
  type          String        // lent, borrowed
  counterparty  String
  dueDate       DateTime?
  isPaid        Boolean       @default(false)
  notes         String?
  
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions  Transaction[]
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  @@index([userId])
  @@index([dueDate])
}

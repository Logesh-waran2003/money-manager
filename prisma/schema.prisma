generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  name              String
  email             String             @unique
  password          String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  categories        Category[]
  credits           Credit[]
  recurringPayments RecurringPayment[]
  transactions      Transaction[]
}

model Account {
  id                String             @id @default(cuid())
  userId            String
  name              String
  type              String
  balance           Float
  currency          String             @default("USD")
  isDefault         Boolean            @default(false)
  creditLimit       Float?
  dueDate           DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  accountNumber     String?
  institution       String?
  notes             String?
  isActive          Boolean            @default(true)
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions      Transaction[]      @relation("FromAccount")
  transfers         Transaction[]      @relation("ToAccount")
  recurringPayments RecurringPayment[]

  @@index([userId])
}

model Category {
  id                String             @id @default(cuid())
  userId            String
  name              String
  color             String             @default("#000000")
  icon              String?
  isIncome          Boolean            @default(false)
  isDefault         Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions      Transaction[]
  recurringPayments RecurringPayment[]

  @@unique([userId, name])
  @@index([userId])
}

model Transaction {
  id                 String            @id @default(cuid())
  userId             String
  accountId          String
  categoryId         String?
  description        String?
  amount             Float
  date               DateTime
  type               String
  creditType         String?
  toAccountId        String?
  recurring          Boolean           @default(false)
  recurringFrequency String?
  recurringEndDate   DateTime?
  direction          String?           // Transaction direction (sent/received) - used for all transaction types
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  appUsed            String?
  counterparty       String?
  creditId           String?
  notes              String?
  recurringPaymentId String?
  isFullSettlement   Boolean           @default(false)
  isRepayment        Boolean           @default(false)
  account            Account           @relation("FromAccount", fields: [accountId], references: [id], onDelete: Cascade)
  category           Category?         @relation(fields: [categoryId], references: [id])
  credit             Credit?           @relation(fields: [creditId], references: [id])
  recurringPayment   RecurringPayment? @relation(fields: [recurringPaymentId], references: [id])
  toAccount          Account?          @relation("ToAccount", fields: [toAccountId], references: [id])
  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([accountId])
  @@index([categoryId])
  @@index([date])
}

model RecurringPayment {
  id                 String        @id @default(cuid())
  userId             String
  name               String
  defaultAmount      Float
  frequency          String        // e.g., "Monthly", "Weekly", "Custom"
  customIntervalDays Int?          // For custom schedules like every 84 days
  startDate          DateTime
  endDate            DateTime?
  nextDueDate        DateTime
  accountId          String?
  categoryId         String?
  counterparty       String?
  description        String?
  direction          String?       // Direction of money flow (sent/received)
  isActive           Boolean       @default(true)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  user               User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  account            Account?      @relation(fields: [accountId], references: [id])
  category           Category?     @relation(fields: [categoryId], references: [id])
  transactions       Transaction[]

  @@index([userId])
  @@index([nextDueDate])
  @@index([accountId])
  @@index([categoryId])
}

model Credit {
  id             String        @id @default(cuid())
  userId         String
  name           String
  amount         Float
  type           String
  counterparty   String
  dueDate        DateTime?
  notes          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  isPaid         Boolean       @default(false)
  isFullySettled Boolean       @default(false)
  currentBalance Float
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions   Transaction[]

  @@index([userId])
  @@index([dueDate])
}
